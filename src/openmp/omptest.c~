#include <nautilus/dev.h>
#include <nautilus/nautilus.h>
#include <nautilus/shell.h>
#include <nautilus/gpudev.h>
#include <dev/testimage.h>

#ifndef NAUT_CONFIG_DEBUG_GPUDEV
#undef DEBUG_PRINT
#define DEBUG_PRINT(fmt, args...) 
#endif

#define ERROR(fmt, args...) ERROR_PRINT("gpudev: " fmt, ##args)
#define DEBUG(fmt, args...) DEBUG_PRINT("gpudev: " fmt, ##args)
#define INFO(fmt, args...) INFO_PRINT("gpudev: " fmt, ##args)


int nk_gpu_dev_init(struct nk_gpu_dev *d)
{
    INFO("init\n");
    return 0;
}

int nk_gpu_dev_deinit(struct nk_gpu_dev *d)
{
    INFO("deinit\n");
    return 0;
}


struct nk_gpu_dev * nk_gpu_dev_register(char *name, uint64_t flags, struct nk_gpu_dev_int *inter, void *state)
{
    INFO("register device %s\n",name);
    return (struct nk_gpu_dev *) nk_dev_register(name,NK_DEV_GENERIC,flags,(struct nk_dev_int *)inter,state);
}

int nk_gpu_dev_unregister(struct nk_gpu_dev *d)
{
    INFO("unregister device %s\n", d->dev.name);
    return nk_dev_unregister((struct nk_dev *)d);
}

struct nk_gpu_dev * nk_gpu_dev_find(char *name)
{
    DEBUG("find %s\n",name);
    struct nk_dev *d = nk_dev_find(name);
    // add type NK_DEV_GPU to dev.h 
    if (d->type!=NK_DEV_GENERIC) {
	DEBUG("%s not found\n",name);
	return 0;
    } else {
	DEBUG("%s found\n",name);
	return (struct nk_gpu_dev*) d;
    }
}

int nk_gpu_dev_get_characteristics(struct nk_gpu_dev *dev, struct nk_gpu_dev_characteristics *c)
{
    struct nk_dev *d = (struct nk_dev *)(&(dev->dev));
    struct nk_gpu_dev_int *di = (struct nk_gpu_dev_int *)(d->interface);

    DEBUG("get characteristics of %s\n",d->name);
    return 0;
    //return di->get_characteristics(d->state,c);
}

int nk_gpu_dev_host_to_device(struct nk_gpu_dev *dev, uint32_t *src, uint64_t len, uint32_t dest, struct nk_gpu_dev_space_conf *config){
   struct nk_dev *d = (struct nk_dev *)(&(dev->dev));
    struct nk_gpu_dev_int *di = (struct nk_gpu_dev_int *)(d->interface);
    DEBUG("device to host of %s\n",d->name);
    return di->host_to_device(d->state, src, len, dest, config);
}

int nk_gpu_dev_render(struct nk_gpu_dev *dev, struct nk_gpu_dev_rect *rect, struct nk_gpu_dev_render_conf *conf){
    struct nk_dev *d = (struct nk_dev *)(&(dev->dev));
    struct nk_gpu_dev_int *di = (struct nk_gpu_dev_int *)(d->interface);
    DEBUG("render function %s\n",d->name);
    return di->render(d->state, rect, conf);
}



int nk_gpu_dev_check_request(struct nk_gpu_dev *dev, nk_gpu_dev_request_type_t req_type){
    struct nk_dev *d = (struct nk_dev *)(&(dev->dev));
    struct nk_gpu_dev_int *di = (struct nk_gpu_dev_int *)(d->interface);
    DEBUG("check request %s\n",d->name);
    return di->request_check(d->state, req_type);
}


//serve as proof of concept
int nk_gpu_dev_allocate_space(struct nk_gpu_dev *dev, le32 *addr, struct nk_gpu_dev_space_conf *config){
    struct nk_dev *d = (struct nk_dev *)(&(dev->dev));
    struct nk_gpu_dev_int *di = (struct nk_gpu_dev_int *)(d->interface);
    DEBUG("allocate space %s\n",d->name);
    return di->helper->allocate_space(d->state, addr, config);
}

int nk_gpu_dev_restore(struct nk_gpu_dev *dev){
    struct nk_dev *d = (struct nk_dev *)(&(dev->dev));
    struct nk_gpu_dev_int *di = (struct nk_gpu_dev_int *)(d->interface);
    DEBUG("restore %s\n",d->name);
    return di->restore(d->state);
}

int nk_gpu_dev_test(struct nk_gpu_dev *dev){
    struct nk_dev *d = (struct nk_dev *)(&(dev->dev));
    struct nk_gpu_dev_int *di = (struct nk_gpu_dev_int *)(d->interface);
    DEBUG("test %s\n",d->name);
    return di->helper->test(d->state);
    
}

static int handle_gputest (char * buf, void * priv)
{
    char name[32], rw[16];
    struct nk_gpu_dev *d;
    struct nk_gpu_dev_characteristics c;

    if ((sscanf(buf,"gputest %s %s ",name,rw)!=2)
	|| (*rw!='r' && *rw!='t') ) { 
        nk_vc_printf("Don't understand %s\n",buf);
        return -1;
    }

    if (!(d=nk_gpu_dev_find(name))) { 
        nk_vc_printf("Can't find %s\n",name);
        return -1;
    }
    if(*rw == 't'){
        if(nk_gpu_dev_check_request(d, NK_GPU_DEV_TEST_REQ) != -1)
           nk_gpu_dev_test(d);
    }
    else{
    //host create content    
    uint64_t fb_length = 480*640* 4;
    uint32_t *framebuffer = malloc(fb_length);
    for(int i = 0;i < fb_length/4;i++){
        framebuffer[i]=test_image[i];
    }
    struct nk_gpu_dev_space_conf config = {640,480};
    uint32_t addr;
    if(nk_gpu_dev_check_request(d, NK_GPU_DEV_ALLOCATE_SPACE_REQ) != -1){

        nk_gpu_dev_allocate_space(d, &addr, &config);
    }
    nk_gpu_dev_host_to_device(d,framebuffer, fb_length, addr,&config);
    
    //if allows support
    //nk_gpu_dev_render_set_conf(d, conf);
    struct nk_gpu_dev_rect rect = {0,0,640,480};
    struct nk_gpu_dev_render_conf conf;;
    conf.sid = 0;
    conf.addr = addr;
    conf.r = rect;
    nk_gpu_dev_render(d, NULL, &conf);
    nk_gpu_dev_restore(d);
    }
    //nk_free    
}


static struct shell_cmd_impl chartest_impl = {
    .cmd      = "gputest",
    .help_str = "gputest dev render",
    .handler  = handle_gputest,
};
nk_register_shell_cmd(chartest_impl);

